openapi: 3.0.3
info:
  description: It contains a REST API to provide useful functions related to the use of the robotic arm. The functions are related to the management of users (add, activate/deactivate, update, change roles, etc.), authentication/authorization and trajectory manipulation (CRUD operations)
  version: 1.0.0
  title: ED-Scorbot Service API
  termsOfService: http://swagger.io/terms/
  contact: 
    email: adalberto@computacao.ufcg.edu.br
  license:
    name: Apache 2.0 (TO BE DEFINED)
    url: http://www.apache.org/licenses/LICENSE-2.0.html

tags:
- name: authentication
  description: Authentication support for all users, essentially involving login/logout
- name: users
  description: Support for user management (add, remove, change roles, etc.)
- name: trajectories
  description: Suppoert for user trajectories management

paths:
  /authenticate:
    post:
      tags:
      - authentication
      summary: Performs user login
      description: This route performs a validation of user credentials using some infrastructure (oauth, LDAP, etc.). After that, it returns a token to be used during any ohter conversation (via headers).
      parameters:
        - in: query
          name: username
          schema:
            type: string
        - in: query
          name: password
          schema:
            type: string
          
      responses:
        200:
          description: User successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        401:
          description: User not authenticated/allowed
          content:
            application/json:
              schema:
                example: 
                  message: User not authenticated. Could not validate user credentials
  /logout:
    post:
      tags:
      - authentication
      summary: Performs user logout 
      description: This route performs the logout of the user
      responses:
        200:
          description: User successfully disconnect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        401:
          description: User not authenticated/allowed, if the user has not been previously logged in
          content:
            application/json:
              schema:
                example: 
                  message: User not previously logged
        500:
          description: Error if some internal problem happens in the robotic arm service
          content:
            application/json:
              schema:
                example: 
                  message: Internal error
  /users:
    get:
      tags:
      - users
      summary: Find all users. For the moment, this funcion is available to all users, independent of their roles.
      responses:
        200:
          description: Finds all users successfully. This route requires the user has been previously logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindAllUsersResponse'
        401:
          description: Find all users is not allowed to be executed
          content:
            application/json:
              schema:
                example:
                  message: User not logged in
    post:
      tags:
      - users
      summary: Add a new user to the system
      description: Add a new user to the application. This functionality is available only to admin users.
      requestBody:
        x-body-name: newUser
        description: The new user to be added to the application
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveResponse'
        401:
          description: Add new user is available only for admin users
          content:
            application/json:
              schema:
                example:
                  message: Non admin users cannot add other users to the system
        500:
          description: Error if some internal problem happens
          content:
            application/json:
              schema:
                example: 
                  message: Internal error
  /users/{email}:
    get:
      tags:
      - users
      summary: Get a user by email
      parameters:
        - in: path
          name: email
          schema:
            type: string
          required: true
          description: The complete email of the user to be searched
      responses:
        200:
          description: Find a specific user. This route requires the user has been previously logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindOneUserResponse'
        401:
          description: Finding users cannot be executed
          content:
            application/json:
              schema:
                example:
                  message: User not allowed to use the system or not logged in
        404:
          description: User not found
          content:
            application/json:
              schema:
                example:
                  message: User was not found in the system
        500:
          description: Error if some internal problem happens
          content:
            application/json:
              schema:
                example: 
                  message: Internal error
    put:
      tags:
      - users
      summary: Updates an existing user. Admin users can update information of any other user. Simple users can update only its own information
      parameters:
        - in: path
          name: email
          description: User email
          required: true
          schema:
            type: string
      requestBody:
        x-body-name: user
        description: User object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'  
      
      responses:
        200:
          description: Updates a specific user. This route requires the user has been previously logged.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResponse'
        401:
          description: Updating user cannot executed
          content:
            application/json:
              schema:
                example:
                  message: User is not logged in or user does not have privileges to perform this operation
        500:
          description: Error if some internal problem happens
          content:
            application/json:
              schema:
                example: 
                  message: Internal error
    delete:
      tags:
      - users
      summary: Delete a user by email. This operation actually disables a user in order to maintain its interaction history with the system. Admin users can delete any other user. Simple users can delete only themselves
      parameters:
        - in: path
          name: email
          schema:
            type: string
          required: true
          description: Complete email of the user to be deleted
      responses:
        200:
          description: User successfully deactivated. This route requires the user has been previously logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        401:
          description: Deleting user cannot be executed
          content:
            application/json:
              schema:
                example:
                  message: User is not logged in or user does not have privileges to perform this operation
        500:
          description: Error if some internal problem happens
          content:
            application/json:
              schema:
                example: 
                  message: Internal error
  /trajectories:
    get:
      tags: 
        - trajectories
      summary: Get all saved trajectories of all users. Admin users can access all trajectories of all users. Simple users can access only their own trajectories
      responses:
        200:
          description: Saved trajectories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trajectory'
        401:
          description: Get all trajectories cannot be executed
          content:
            application/json:
              schema:
                example:
                  message: User is not logged in
        500:
          description: Error if some internal problem happens
          content:
            application/json:
              schema:
                example: 
                  message: Internal error
    post:
      tags: 
        - trajectories
      summary: Saves a trajectory for logged user
      requestBody:
        x-body-name: newTrajectory
        description: The new trajectory to be saved 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: 
                  type: string
                points: 
                  type: array
                  items:
                    $ref: '#/components/schemas/Point'
              example:
                username: adalberto.farias
                points:
                  [
                    {
                      "coordinates": [1,1,1,1,1,1,200]
                    },
                    {
                      "coordinates": [2,2,2,2,2,2,200]
                    }
                  ]
      responses:
        200:
          description: Trajectory saved to the logged user
          content:
            application/json:
              schema:
                example:
                  message: Trajectory saved
        401:
          description: Save trajectory cannot be executed
          content:
            application/json:
              schema:
                example:
                  message: User not logged in
        500:
          description: Error if some internal problem happens
          content:
            application/json:
              schema:
                example: 
                  message: Internal error

components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: adalberto.farias
        email:
          type: string
          example: name@company.com
        password:
          type: string
          example: myPassword
        name:
          type: string
          example: John
        enabled:
          type: boolean
          example: true
        role:
          type: string
          enum:
            - ADMIN
            - USER
          example: ADMIN

    UserList:
      type: array
      description: A list of users manipulated by the application
      items:
          $ref: '#/components/schemas/User'
      example: 
       - email: name1@domain.com
         name: John First
         enabled: true
         role: ADMIN
       - email: name2@domain.com
         name: David First
         enabled: true
         role: USER
       
    SaveResponse:
      type: object
      properties:
        flag:
          type: boolean
          description: Save success or not
        code:
          type: integer
          description: the HTTP response code
          example: 200
        message:
          type: string
          example: Save Success
    UpdateResponse:
      type: object
      properties:
        flag:
          type: boolean
          description: Update success or not
        code:
          type: integer
          description: the HTTP response code
          example: 200
        message:
          type: string
          example: Update Success
    DeleteResponse:
      type: object
      properties:
        flag:
          type: boolean
          description: Delete success or not
        code:
          type: integer
          description: the HTTP response code
          example: 200
        message:
          type: string
          example: Delete Success
    LoginResponse:
      type: object
      properties:
        flag:
          type: boolean
          description: Login success or not
        code:
          type: integer
          description: the HTTP response code
          example: 200
        message:
          type: string
          example: Login Success
        user:
          $ref: '#/components/schemas/User'
            
    FindAllUsersResponse:
      type: object
      properties:
        flag:
          type: boolean
          description: A boolean indicating if the response corresponds to success or error
        code:
          type: integer
          description: the HTTP status code
          example: 200
        message:
          type: string
          description: An intuitive message encapsulated in the response
          example: Find All users Succeded
        data:
          $ref: '#/components/schemas/UserList'
          
    FindOneUserResponse:
      type: object
      properties:
        flag:
          type: boolean
          description: Success or not
        code:
          type: integer
          description: The HTTP status code
          example: 200
        message:
          type: string
          example: Find One User Success
        data:
          example:
              email: 1
              name: John
              enabled: true
              role: ADMIN
    Joint:
      type: integer
      description: The reference value (angle) of a joint.
      
    Point:
      type: array
      description: A tuple (set of coordinates) containing (possibly many) information about the angles of the joints and one information (the last coordinate) meaning the time to wait before accepting the next move command. The representation of a point as an array allows many robots to be handled as there is no fixed number of joints. This is formation should be obtained bu clients before connecting to a specific arm. 
      items:
        $ref: '#/components/schemas/Joint'
    
    Trajectory:
      type: array
      description: A array of points to be applied to the arm.
      items:
        $ref: '#/components/schemas/Point'