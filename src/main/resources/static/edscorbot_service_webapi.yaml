openapi: 3.0.9
info:
  description: It contains a REST API to provide useful functions related to the use of the robotic arm. The functions are related to the management of users (add, activate/deactivate, update, change roles, etc.), authentication/authorization and trajectory manipulation (CRUD operations)
  version: 1.0.0
  title: ED-Scorbot Service API
  termsOfService: http://swagger.io/terms/
  contact: 
    email: adalberto@computacao.ufcg.edu.br
  license:
    name: Apache 2.0 (TO BE DEFINED)
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: "http://192.168.1.104"
    description: Development and test environments 
      
tags:
- name: authentication
  description: Authentication support for all users, essentially involving login/logout
- name: users
  description: Support for user management (add, remove, change roles, etc.)
- name: trajectories
  description: Suppoert for user trajectories management


paths:
  /authenticate:
    post:
      tags:
      - authentication
      summary: Authenticates an user in the system
      description: This route performs a validation of user credentials using an internal infrastructure (JWT). After that, it returns a token to be used during any other conversation (via headers).
      requestBody:
        x-body-name: credentials
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      
      responses:
        200:
          description: User successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        401:
          description: User not authorized
          content:
            application/json:
              schema:
                example: 
                  message: User not authenticated. Could not validate user credentials
        500:
          description: Error if some internal problem happens
          content:
            application/json:
              schema:
                example: 
                  message: Internal error
  /signup:
    post:
      tags:
        - authentication
      summary: Performs register of a new user
      description: This route performs the register of a new user. Users are initially disabled to login the system untill a system administrator enables it.
      requestBody:
        x-body-name: signupBody
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SignupRequest'
              
      responses:
        200:
          description: User successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        412:
          description: User already registered
          content:
            application/json:
              schema:
                example: 
                  message: User already registered. Pre-condition failed
        500:
          description: Error if some internal problem happens
          content:
            application/json:
              schema:
                example: 
                  message: Internal error

  /users:
    get:
      tags:
      - users
      summary: Find all users. This route requires the user is logged. For ADMIN users, it returns a list containing all users. Otherwise, it returns a list containing only the logged user (not ADMIN).
      parameters:
        - in: header
          name: username
          schema:
            type: string
          required: true
          description: The username of the logged user
          
      responses:
        200:
          description: Finds all users successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        401:
          description: Not authorized
          content:
            application/json:
              schema:
                example:
                  message: User not logged in
        500:
          description: Error if some internal problem happens
          content:
            application/json:
              schema:
                example: 
                  message: Internal error
  
  /users/{username}:
    get:
      tags:
      - users
      summary: Get an user by username. This route requires the user is logged in.
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: The username of the user to be searched
          
        - in: header
          name: username
          schema:
            type: string
          required: true
          description: The username of the logged user
      responses:
        200:
          description: Find a specific user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Not authorized. User is not logged in
          content:
            application/json:
              schema:
                example:
                  message: User not allowed to use the system or not logged in
        404:
          description: Requested user not found
          content:
            application/json:
              schema:
                example:
                  message: User was not found in the system
        500:
          description: Error if some internal problem happens
          content:
            application/json:
              schema:
                example: 
                  message: Internal error or non admin user cannot request data of anotehr user
    put:
      tags:
      - users
      summary: Updates an existing user. This route requires the user is logged in. Admin users can update information of any other user. Simple users can update only its own information
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
        - in: header
          name: username
          schema:
            type: string
          required: true
          description: The username of the logged user
      requestBody:
        x-body-name: userDto
        description: User object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'  
      
      responses:
        200:
          description: Updates a specific user. This route requires the user has been previously logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Updating user cannot executed
          content:
            application/json:
              schema:
                example:
                  message: User is not logged in or user does not have privileges to perform this operation
        404:
          description: User not found
          content:
            application/json:
              schema:
                example:
                  message: User was not found in the system
        500:
          description: Error if some internal problem happens
          content:
            application/json:
              schema:
                example: 
                  message: Internal error
    
  /trajectories:
    get:
      tags: 
        - trajectories
      summary: Get all trajectories of all users. This route requires the user has previously logged in. Admin users can access all trajectories of all users. Simple users can access only their own trajectories
      parameters:
        - in: header
          name: username
          schema:
            type: string
          required: true
          description: The username of the logged user 
      responses:
        200:
          description: Saved trajectories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrajectoryList'
        401:
          description: Not authorized
          content:
            application/json:
              schema:
                example:
                  message: User is not logged in
        404:
          description: User not found
          content:
            application/json:
              schema:
                example:
                  message: User was not found in the system
        500:
          description: Error if some internal problem happens
          content:
            application/json:
              schema:
                example: 
                  message: Internal error
    post:
      tags: 
        - trajectories
      summary: Saves a trajectory for logged user. This route requires the user has previously logged in.
      parameters:
        - in: header
          name: username
          schema:
            type: string
          required: true
          description: The username of the logged user
      requestBody:
        x-body-name: trajectoryDto
        description: The new trajectory to be saved 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                points: 
                  type: array
                  items:
                    $ref: '#/components/schemas/Point'
              example:
                points:
                  [
                    {
                      "coordinates": [1,1,1,1,1,1,200]
                    },
                    {
                      "coordinates": [2,2,2,2,2,2,200]
                    }
                  ]
      responses:
        200:
          description: Trajectory saved to the logged user. This route requires the user has previously logged in.
          content:
            application/json:
              schema:
                example:
                  message: Trajectory saved
        401:
          description: Not authorized
          content:
            application/json:
              schema:
                example:
                  message: User not logged in
        404:
          description: User not found
          content:
            application/json:
              schema:
                example:
                  message: User was not found in the system
        500:
          description: Error if some internal problem happens
          content:
            application/json:
              schema:
                example: 
                  message: Internal error
                  
  /trajectories/{timestamp}:
    delete:
      tags: 
        - trajectories
      summary: Deletes a specific trajectory. This route requires the user has previously logged in. Admin users can delete all trajectories of all users. Simple users can delete only their own trajectories
      parameters:
        - in: path
          name: timestamp
          schema:
            type: string
          required: true
          description: The timestamp indentifying a trajectory 
        - in: header
          name: userToken
          schema:
            type: string
          required: true
          description: The token of the logged user
      responses:
        200:
          description: Trajectory deleted
          content:
            application/json:
              schema:
                example:
                  message: true
        401:
          description: Not authorized
          content:
            application/json:
              schema:
                example:
                  message: User is not logged in or cannot delete this trajectory
        500:
          description: Error if some internal problem happens
          content:
            application/json:
              schema:
                example: 
                  message: Internal error
                  
components:
  schemas:
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          example: myusername
        password:
          type: string
          example: mypassword
          
    LoginResponse:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        name:
          type: string
        enabled:
          type: boolean
        role:
          type: string
          enum:
            - ADMIN
            - USER
        token:
          type: string
          description: A valid JWT token generated by the system
    
    SignupRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        name:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
            - ADMIN
            - USER
          description: Initially is 'USER'
          
    User:
      type: object
      properties:
        username:
          type: string
          example: adalberto.farias
        email:
          type: string
          example: name@company.com
        password:
          type: string
          example: myPassword
        name:
          type: string
          example: John
        enabled:
          type: boolean
          example: true
        role:
          type: string
          enum:
            - ADMIN
            - USER
          example: ADMIN

    UserList:
      type: array
      description: A list of users manipulated by the application
      items:
          $ref: '#/components/schemas/User'
    
    Joint:
      type: integer
      description: The reference value (angle) of a joint.
      
    Point:
      type: array
      description: A tuple (set of coordinates) containing (possibly many) information about the angles of the joints and one information (the last coordinate) meaning the time to wait before accepting the next move command. The representation of a point as an array allows many robots to be handled as there is no fixed number of joints. This is formation should be obtained bu clients before connecting to a specific arm. 
      items:
        $ref: '#/components/schemas/Joint'
    
    Trajectory:
      type: array
      description: A array of points to be applied to the arm.
      items:
        $ref: '#/components/schemas/Point'
    
    TrajectoryList:
      type: array
      description: A list of trajectories manipulated by the application
      items:
          $ref: '#/components/schemas/Trajectory'